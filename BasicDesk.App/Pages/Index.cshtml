@page
@model BasicDesk.App.Pages.IndexModel
@{
    ViewData["Title"] = "Index";
}
@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Model.Select(x => x.DimensionOne).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Model.Select(x => x.Quantity).ToList());
}
@if (!User.Identity.IsAuthenticated)
{
    <div class="jumbotron text-center">
        <h1>BasicDesk</h1>
        <h2>Helpdesk Management System</h2>
        <hr class="bg-dark" />
        <p><a asp-area="Identity" asp-page="/Account/Login">Login </a> if you have an account.</p>
        <p><a asp-area="Identity" asp-page="/Account/Register">Register </a> if you don't.</p>
    </div>
}
else
{
    <div class="box-body clearfix row">
        <div class="col-md-6">
            <h4 class="text-center">Your Requests</h4>
            <div class="chart-container">
                <canvas id="chart" style="height:400px"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <h4 class="text-center">Actions</h4>
            <a asp-controller="Requests" asp-action="Index" class="btn myBtn btn-block">View All Requests</a>
            <a asp-area="" asp-controller="Requests" asp-action="Create" class="btn myBtn btn-block">
                Create Request <i class="glyphicon-plus"></i>
            </a>
        </div>
    </div>
        <script src="~/js/Chart.bundle.min.js"></script>
        <script src="~/js/chartjs-plugin-labels.js"></script>
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script type="text/javascript">

            $(function () {
        var chartName = "chart";
            var ctx = document.getElementById(chartName).getContext('2d');
            var data = {
                labels: @Html.Raw(XLabels),
                datasets: [{
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            'rgba(255, 0, 0)',
                            'rgba(0, 255, 0)',
                            'rgba(0, 0, 255)',
                            'rgba(192, 192, 192)',
                            'rgba(255, 255, 0)',
                            'rgba(255, 0, 255)',
                        ],
                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(255, 0, 0)',
                            'rgba(0, 255, 0)',
                            'rgba(0, 0, 255)',
                            'rgba(192, 192, 192)',
                            'rgba(255, 255, 0)',
                            'rgba(255, 0, 255)'
                        ],
                        borderWidth: 1,
                        data: @Html.Raw(YValues)
                    }]
                };

                var options = {
                    plugins: {
                        labels: {
                            render: 'value'

                        }
                    },
                    maintainAspectRatio: false,
                    scales: {
                        yAxes: [{
                            ticks: {
                                min: 0,
                                beginAtZero: true,
                                display: false  // removes scale
                            },
                            gridLines: {
                                display: false,
                                color: "rgba(255,99,164,0.2)",
                                drawBorder: false //removes axis
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                min: 0,
                                beginAtZero: true,
                                display: false // removes scale
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false //removes axis
                            }
                        }]
                    }
                };
           var myChart = new  Chart(ctx, {
                    options: options,
                    data: data,
                    type: "@TempData["Type"]"
                    // may be pie bar doughnut and others
                });
            });
    </script>
}
